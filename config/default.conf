
train {
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 400000

    eval_batch_size = 1024
    batch_size = 1024

    validate_resolution_level = 2
    warm_up_end = 2000
    anneal_end = 0

    use_white_bkgd = False
    old_sample = False
    
    uniform_sample = True
    save_freq = 1000
    val_freq = 500
    val_mesh_freq = 5000
    report_freq = 100

    igr_weight = 0.1
    mask_weight = 0.1
}

model {
    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    sdf_network {
        d_out = 1
        d_in = 3
        d_hidden = 256
        n_layers = 8
        skip_in = [4]
        multires = 6
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 1
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 8
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        n_samples = 64
        n_importance = 64
        n_outside = 0
        up_sample_steps = 4     # 1 for simple coarse-to-fine sampling
        perturb = 1.0
    }

    code {
        num_freqs = 6
        freq_factor = 1.5
        include_input = True
    }
    using_smplx = False
    
}

dataset{
    using_blending_weight = True
    using_3d = False
    preload = True
    ratio = 0.5 ## image scaling
    mask_bkgd = True
    white_bkgd = False
    face_sample_ratio = 0
    body_sample_ratio = 0.5
    ray_samples = 1024
}